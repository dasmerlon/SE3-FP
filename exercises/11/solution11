#lang racket
(require se3-bib/prolog/prologInScheme)

;; Blatt 11

;; 1 --- Prolog in Racket
;; 1.1 - Unifikation (10 Punkte)
; a)  geht nicht, weil die Ausdrücke teils 2, teils 3 Ausdrücke haben
; b)  ((?A . 3+2))
; c)  nicht möglich, da ?A nicht zwei Ausdrücke sein kann
; d)  ((?A . (3 + 2))
; e)  ((?X . 1) (?B . 2) (?REST . (?B ?X)))
; f)  Falsche Syntax: kein Space zwischen . und ?REST
;     falls ". ?REST": ((?X . 1) (?B . 2) (?Y . (1)) (?REST . (?B ?Y)))

; g)
(unify '(?a + ?b + 3)
       '(1 + ?b + ?D)
       '(1 + ?b)
       '(1 + 4)
       no-bindings)

(unify '(?a + 1)
       '(3+2 +1)
       no-bindings)


(unify '(?a + 1)
       '(3 + 2 +1)
       no-bindings)

(unify '(?a + 1)
       '((3 + 2) +1)
       no-bindings)

(unify '(1 ?B .?REST)
       '(?X 2 ?B ?Y)
       '(?X 2 ?B . (1)) no-bindings)

;; 1.2 - Anfragen (10 Punkte)

;; 2 --- Memo-Funktionen (5 Punkte)

;; 3 --- Stromorientierte Programmierung (10 Punkte)
