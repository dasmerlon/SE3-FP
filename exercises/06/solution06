#lang racket
(require 2htdp/image)
(require 2htdp/universe)

;; Blatt 6

;; 1 --- Formen der Rekursion (10 Punkte)
#|
Endrekursion:
Rekursive Funktionen, bei denen das Ergebnis der Rekursion nicht mehr mit anderen Termen
verknüpft werden muß, heißen endrekursiv (engl. tail-recursion).
Die zugehörigen Prozesse heißen iterative Prozesse.

Lineare Rekursion:
Eine Funktionsdefinition, die sich auf der rechten Seite der definierenden Gleichung in jeder
Fallunterscheidung selbst nur einmal verwendet, heißt Rekursion: linear-rekursiv

Baumartige Rekursion:
Eine rekursive Definition ist baumartig, wenn in der Definition in einer Fallunterscheidung
mehrfach auf die Definition Bezug genommen wird.

Geschachtelte Rekursion:
Eine Rekursion ist geschachtelt, wenn die Funktion in der rekursiven Verwendung selbst als
Argument mitgegeben wird.

Direkte Rekursion:
Eine Methode heißt direkt rekursiv, wenn der erneute Aufruf im Methodenrumpf der Methode erfolgt.

Indirekte Rekursion:
Eine rekursive Definiton heißt indirekt oder verschränkt, wenn zwei oder mehrere Definitionen
sich wechselseitig rekursiv verwenden.
|#


;; 2 --- Ihre Nikolausaufgabe (20 Punkte)
(define scene
  ; definiert die Größe der Szene und die Hintergrundfarbe
  (empty-scene 900 500 (color 25 25 80)))

(define ground
  ; definiert den Schneeboden
  (crop/align "right" "top"
              1000 200
              (ellipse 1800 300 "solid" "whitesmoke")))

(define (oneStar size)
  ; definiert einen Stern
  (radial-star 8 2 size "solid" (color 255 255 153)))

(define (stars number)
  ; Sterne
  (if (> number 1)
      (underlay/offset (oneStar (random 2 20))
                       (random 900) (random 500)
                       (stars (- number 1)))
      (oneStar (random 2 20))))

(define (tree size greenColor)
  ; Hintergrundbaum
  (if (> size 0)
      (overlay/align/offset "middle" "middle"
                            (triangle size "solid" (color 0 greenColor 0))
                            0 (* size -0.4)
                            (tree (- size 15) greenColor))
      (triangle 0 "solid" (color 0 greenColor 0))))

(define (trees number)
  ; erzeugt Hintergrundbäume
  (if (> number 1)
      (overlay/offset (tree (random 100 300) (random 50 100))
                      (random 900) 0
                      (trees (- number 1)))
      (tree (random 100 300) (random 50 100))))

(define (treeLeaves size)
  ; erzeugt den Weihnachtsbaume ohne Stamm
  (if (> size 0)
      (underlay/align/offset "middle" "middle"
                             (pulled-regular-polygon size 3 1/5 30 "solid" (color 34 160 34))
                             0 (* size -0.4)
                             (treeLeaves (- size 30)))
      (star 25 "solid" "gold")))

(define christmasTree
  ; erzeugt Weihnachtsbaum mit Stamm
  (overlay/align/offset "middle" "bottom"
                        (treeLeaves 200)
                        0 10
                        (pulled-regular-polygon 50 4 1/5 30 "solid" "sienna")))

(define placeStars
  ;platziert Hintergrundbäume in Szene
  (place-image (stars 200)
               900 400
               scene))

(define placeTrees
  ;platziert Hintergrundbäume in Szene
  (place-image (trees 100)
               600 300
               placeStars))

(define placeGround
  ;platziert Boden in Szene
  (place-image/align ground
                     0 500
                     "left" "bottom"
                     placeTrees))

(define placeChristmasTree
  ;platziert Weihnachstsbaum in Szene
  (place-image/align christmasTree
                     200 275
                     "middle" "middle"
                     placeGround))

(define createScene
  placeChristmasTree)

; erzeugt das Bild:
createScene



;; Zusatzaufgabe: Animation (Schneefall?)
