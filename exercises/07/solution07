#lang racket
(require 2htdp/image)
(require 2htdp/universe)

;; Blatt 7

;; 1 --- Abbilden (10 Punkte)
(define (zaehlen1 x xs) 
  ; als allgemein rekursive Funktion
   (if (empty? xs)
      0
      (if (equal? (car xs) x)
          (+ 1 (zaehlen1 x (cdr xs)))
          (zaehlen1 x (cdr xs)))))


(define (zaehlen2 x xs (zaehler 0)) 
  ; als endrekursive Funktion
   (if (empty? xs)
      zaehler
      (if (equal? x (car xs))
      (zaehlen2 x (cdr xs) (add1 zaehler))
      (zaehlen2 x (cdr xs) zaehler))))


(define (zaehlen3 x xs)
  ; mittels geeigneter Funktionen höherer Ordnung
  (foldl (lambda (element zaehler)
           (if (equal? x element)
               (add1 zaehler)
               zaehler))
         0 xs))

;(zaehlen1 3 '(1 4 3 2 3 4 3))
;(zaehlen2 3 '(1 4 3 2 3 4 3))
;(zaehlen3 3 '(1 4 3 2 3 4 3))


;; 2 --- Das Spiel des Lebens
#|
Anfangszustand setzen
Folgezustand anhand der Regel von Game of Life:
- Eine tote Zelle mit genau drei lebenden Nachbarn wird (neu) geboren
- eine lebende Zelle mit weniger als zwei lebendigen Nachbarn stirbt an
  Einsamkeit
- eine lebende Zelle mit mehr als drei lebendigen Nachbarn stirbt wegen
  Überbevölkerung

Für Folgezustand muss Zelle immer die Zustände der Nachbarn kennen
Map und List-ref?

30x30 Spielfeld mit jedem Quadrat 10 x 10 pixel
tote Zelle unausgefülltes Quadrat
lebende Zelle ausgefülltes Quadrat
|#

#|
TEILPROBLEME:
Spielfeld erstellen 
anhand der gegebenen Regeln den Zustand einer Zelle bestimmen
Zustände der Zellen im Spielfeld setzten
animieren des Spielfelds mit den Zellen

GLIEDERUNG:

1. startCond
   Input:
    - 
   Aufgabe:
    - Setzt einen Anfangszustand
   Output:
    - Zustand der ersten Zellen

2. defineCellCond
   Input:
    - Zustand der ersten Zellen
   Aufgabe:
    - definiert den Zustand einer Zelle
   Output:
    - Zellenzustand als Liste

3. createCell
   Input:
    - Zellenzustand als Liste
   Aufgabe:
    - erzeugt eine lebendige/tote Zelle
   Output:
    - lebende/tote Zelle als Image

4. createGame
   Input:
    - lemebnde/tote Zelle als Image
   Aufgabe:
    - erzeugt ein Spielfeld mit den Zellzuständen
   Output:
    - Spielfeld mit Zellzuständen als Image

5. animateGame
   Input:
    - Spielfeld mit Zellzuständen als Image
   Aufgabe:
    - animiert das Spiel mit aufeinanderfolgenden Images des Spiels
   Output:
    -
|#


;; 2.1 - Modellierung des Spielzustands (5 Punkte)
#|
Mögliche Datenstrukturen:

1. Eine Liste mit N Listen:
   - Jede Unterliste repräsentiert eine Zeile, in der jedes Element eine Zelle darstellt.
2. Ein Vektor mit N Vektoren:
   - Jeder Untervektor repräsentiert eine Zeile.

Wir wählen die 2. Variante, da man auf die Elemente eines Vektors direkt zugreifen
kann und nicht durch die Liste durchgehen muss. Dadruch hat man einen schnelleren
Zugriff auf ein Element, was zum Vorteil ist, da wir immer eine bestimmte Zelle
betrachten wollen. Jedes Element enhält einen booleschen Wert:
#t für eine lebendige Zelle und #f für eine tote Zelle.
|#

(define startCond
  ; Datenstruktur, welchen den Anfangszustand abbildet
  ;   00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
  #(#(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;00
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;01
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;02
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #t #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;03
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #t #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;04
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;05
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;06
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;07
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;08
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;09
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;10
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;11
    #(#f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;12
    #(#f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;13
    #(#f #f #f #f #f #f #t #t #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;14
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;15
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;16
    #(#f #f #f #f #f #f #t #t #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;17
    #(#f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;18
    #(#f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;19
    #(#f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;20
    #(#f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;21
    #(#f #f #f #f #f #f #t #t #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;22
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;23
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;24
    #(#f #f #f #f #f #f #t #t #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;25
    #(#f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;26
    #(#f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;27
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)   ;28
    #(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f))) ;29
    
    
;; 2.2 - Visualisierung des Spielzustands (5 Punkte)
(define (drawCell cell)
  ; erzeugt eine lebendige, bzw. tote Zelle
  (let ([style (if cell
                   "solid"
                   "outline")])
    (square 10 style "black")))


(define (drawRow row)
  ; erzeugt eine Reihe von Zellen
  (let ([cellList (vector->list (vector-map drawCell row))])
    (apply beside cellList)))


(define (drawGame game)
  ; erzeugt das Spielfeld
  (let ([rowList (vector->list (vector-map drawRow game))])
    (apply above rowList)))

(drawGame startCond)


;; 2.3 - Spiellogik und Tests (15 Punkte)
(define (getCell game x y)
  ; gibt den Status einer Zelle an einer bestimmten Position wieder
  (let ([row (vector-ref game y)]) ;y. Zeile
    (vector-ref row x))) ;x. Spalte

; zum Testen:
; (getCell startCond 15 2)  ;#t
; (getCell startCond 20 10) ;#f


;; 2.5 - Zusatzaufgabe: Spielfeldrand (5 Zusatzspunkte)
(define (getNeighbors game x y)
  ; bestimmt die 8 Nachbarn von einer Zelle an der Position x y.
  (let ([x+1 (modulo (+ x 1) 30)]          ;rechts
        [x-1 (modulo (- (+ x 30) 1) 30)]   ;links
        [y+1 (modulo (+ y 1) 30)]          ;unten
        [y-1 (modulo (- (+ y 30) 1) 30)])  ;oben
    (vector (getCell game x-1 y-1)
            (getCell game x-1 y)
            (getCell game x-1 y+1)
            (getCell game x y-1)
            (getCell game x y+1)
            (getCell game x+1 y-1)
            (getCell game x+1 y)
            (getCell game x+1 y+1))))

; zum Testen:
; (getNeighbors startCond 15 2)


(define (newCellCond game x y)
  ; bestimmt den Folgezustand einer Zelle anhand ihrer Nachbarn.
  (let* ([neighbors (getNeighbors game x y)]
         [livingNeighbors (- 8 (vector-count false? neighbors))])
    (cond
      [(= livingNeighbors 3) #t]
      [(< livingNeighbors 2) #f]
      [(> livingNeighbors 3) #f]
      [else (getCell game x y)])))
      
; zum Testen:
; (newCellCond startCond 15 2)


(define (newGameCond game)
  ; ermittelt den neuen Spielzustand
  (let ([newRow (lambda (y)
                  (list->vector
                   (map (lambda (x)
                          (newCellCond game x y))
                        (range 0 30))))])
    (list->vector (map newRow (range 0 30)))))

; zum Testen:
; (drawGame (newGameCond startCond))

  
;; 2.4 - Simulation (5 Punkte)
(big-bang startCond
  ; simuliert das Spiel des Lebens mit 4 Zustandsübergängen pro Sekunde
          (to-draw drawGame)
          (on-tick newGameCond 0.2))  ;eigentlich 0.25 für 4 Übergänge pro Sekunde)
