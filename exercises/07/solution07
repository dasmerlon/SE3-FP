#lang racket
(require 2htdp/image)
(require 2htdp/universe)

;; Blatt 7

;; 1 --- Abbilden (10 Punkte)
(define (zaehlen1 x xs (zaehler 0)) 
  ; als allgemein rekursive Funktion (linear)
   (if (empty? xs)
      zaehler
      (if (equal? x (car xs))
      (zaehlen1 x (cdr xs) (add1 zaehler))
      (zaehlen1 x (cdr xs) zaehler))))
 

;(define (zaehlen2 x xs)
  ; als endrekursive Funktion
  ;)

(define (zaehlen3 x xs)
  ; mittels geeigneter Funktionen höherer Ordnung
  (foldl (lambda (element zaehler)
           (if (equal? x element)
               (add1 zaehler)
               zaehler))
         0 xs))



;(zaehlen1 3 '(1 4 3 2 3 4 3))
;(zaehlen2 3 '(1 4 3 2 3 4 3))
;(zaehlen3 3 '(1 4 3 2 3 4 3))


;; 2 --- Das Spiel des Lebens
#|

Anfangszustand setzen
Folgezustand anhand der Regel von Game of Life:
- Eine tote Zelle mit genau drei lebenden Nachbarn wird (neu) geboren
- eine lebende Zelle mit weniger als zwei lebendigen Nachbarn stirbt an
  Einsamkeit
- eine lebende Zelle mit mehr als drei lebendigen Nachbarn stirbt wegen
  Überbevölkerung

Für Folgezustand muss Zelle immer die Zustände der Nachbarn kennen
Map und List-ref?

30x30 Spielfeld mit jedem Quadrat 10 x 10 pixel
tote Zelle unausgefülltes Quadrat
llebende Zelle ausgefülltes Quadrat

|#

#|
Teilprobleme
Spielfeld erstellen 
anhand der gegebenen Regeln den Zustand einer Zelle bestimmen
Zustände der Zellen im Spielfeld setzten
animieren des Spielfelds mit den Zellen




Gliederung

1. startCond
   Input:
    - 
   Aufgabe:
    - Setzt einen Anfangszustand
   Output:
    - Zustand der ersten Zellen

2. defineCellCond
   Input:
    - Zustand der ersten Zellen
   Aufgabe:
    - definiert den Zustand einer Zelle
   Output:
    - Zellenzustand als Liste

3. createCell
   Input:
    - Zellenzustand als Liste
   Aufgabe:
    - erzeugt eine lebendige/tote Zelle
   Output:
    - lebende/tote Zelle als Image

4. createGame
   Input:
    - lemebnde/tote Zelle als Image
   Aufgabe:
    - erzeugt ein Spielfeld mit den Zellzuständen
   Output:
    - Spielfeld mit Zellzuständen als Image

5. animateGame
   Input:
    - Spielfeld mit Zellzuständen als Image
   Aufgabe:
    - animiert das Spiel mit aufeinanderfolgenden Images des Spiels
   Output:
    -

Datenstruktur:
?
|#
;; 2.1 - Modellierung des Spielzustands (5 Punkte)

;; 2.2 - Visualisierung des Spielzustands (5 Punkte)

;; 2.3 - Spiellogik und Tests (15 Punkte)

;; 2.4 - Simulation (5 Punkte)

;; 2.5 - Zusatzaufgabe: Spielfeldrand (5 Zusatzspunkte)

