#lang racket
(require se3-bib/setkarten-module)
  
;; Blatt 8

;; 1 --- Funktionen höherer Ordnung und Closures (10 Punkte)
;; 1.1 Wann ist eine Racket-Funktion eine Funktion höherer Ordnung?
;      - Funktionen höherer Ordnung sind Funktionen, die Funktionen als Argumente
;        erhalten oder als Wert zurückgeben.


;; 1.2 Welche der folgenden Funktionen sind Funktionen höherer Ordnung und warum?
; (a) Funktion höherer Ordnung, da sie eine Funktion als Argument erwartet.
;     Sie gibt einen Boolean-Wert zurück.
(define (test-vergleich x)
  (cond [(x 0 0) #f]
        [(x 11 12) #f]
        [else #t]))

; (b) keine Funktion höherer Ordnung, da sie keine Funktionen als Argument erhält und
;     auch keine Funktion als Wert zurückgibt. Sie erwartet zwei gleich lange Listen
;     und gibt eine Zahl zurück.
(define (mul-lists xs ys)
  (foldl * 1 xs ys))

; (c) keine Funktion höherer Ordnung, da sie keine Funktionen als Argument erhält und
;     auch keine Funktion als Wert zurückgibt. Sie erwartet zwei Zahlen und gibt
;     eine Zahl zurück.
(define (plus x y)
  ((lambda (a b) (+ a b)) x y))

; (d) Funktion höherer Ordnung, da sie eine Funktion als Wert zurückgibt.
;     Sie erwartet zwei echte Zahlen.
(define (ermittle-vergleichsoperation x y)
  (cond [(< x y) <]
        [(> x y) >]
        [(- x y) -]))

; (e) Funktion höherer Ordnung, da sie eine Funktion als Argument erwartet.
(define (schweinchen-in-der-mitte f arg1)
  (lambda (arg2 arg3) (f arg2 arg1 arg3)))


;; 1.3
; ((schweinchen-in-der-mitte list 4) 1 3)
; -> '(1 4 3)
; Die Funktion list und die 4 sind in der Closure gebunden.
; Die Zahlen 1 und 3 definieren die Umgebung. 



;; 1.4 Zu welchem Wert evaluieren die folgenden Ausdrücke?
;(foldl (curry + 3) 1 '(2 3 5))
;20

;(map even? '(4 587 74 69 969 97 459 4))
;'(#t #f #t #f #f #f #f #t)

;(filter number? '(#f (2) 3 (()) 4 -7 "c"))
;(3 4 -7)

;((curry filter (compose test-vergleich
;                        (curry ermittle-vergleichsoperation 11)))
; '(5682 48 24915 -45 -6 48 11))
;'(-45 -6)


;; 2 --- Einfache funktionale Ausdrücke höherer Ordnung (6 Punkte)
;; 2.1
;; 2.2
;; 2.3
;; 2.4 (3 Zusatzpunkte)

;; 3 --- Spieltheorie: Das Kartenspiel SET! 
;; 3.1 - (4 Punkte)
;; 3.2 - (10 Punkte)
;; 3.3 - (10 Punkte)
;; 3.4 - (7 Zusatzpunkte)
