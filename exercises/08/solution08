#lang racket
(require se3-bib/setkarten-module)
  
;; Blatt 8

;; 1 --- Funktionen höherer Ordnung und Closures (10 Punkte)
;; 1.1 Wann ist eine Racket-Funktion eine Funktion höherer Ordnung?
;      - Funktionen höherer Ordnung sind Funktionen, die Funktionen als Argumente
;        erhalten oder als Wert zurückgeben.


;; 1.2 Welche der folgenden Funktionen sind Funktionen höherer Ordnung und warum?
; (a) Funktion höherer Ordnung, da sie eine Funktion als Argument erwartet.
;     Sie gibt einen Boolean-Wert zurück.
(define (test-vergleich x)
  (cond [(x 0 0) #f]
        [(x 11 12) #f]
        [else #t]))

; (b) keine Funktion höherer Ordnung, da sie keine Funktionen als Argument erhält und
;     auch keine Funktion als Wert zurückgibt. Sie erwartet zwei gleich lange Listen
;     und gibt eine Zahl zurück.
(define (mul-lists xs ys)
  (foldl * 1 xs ys))

; (c) keine Funktion höherer Ordnung, da sie keine Funktionen als Argument erhält und
;     auch keine Funktion als Wert zurückgibt. Sie erwartet zwei Zahlen und gibt
;     eine Zahl zurück.
(define (plus x y)
  ((lambda (a b) (+ a b)) x y))

; (d) Funktion höherer Ordnung, da sie eine Funktion als Wert zurückgibt.
;     Sie erwartet zwei echte Zahlen.
(define (ermittle-vergleichsoperation x y)
  (cond [(< x y) <]
        [(> x y) >]
        [(- x y) -]))

; (e) Funktion höherer Ordnung, da sie eine Funktion als Argument erwartet.
(define (schweinchen-in-der-mitte f arg1)
  (lambda (arg2 arg3) (f arg2 arg1 arg3)))


;; 1.3
; ((schweinchen-in-der-mitte list 4) 1 3)
; -> '(1 4 3)
; Die Funktion list und die 4 sind in der Closure gebunden.
; Die Zahlen 1 und 3 definieren die Umgebung. 


;; 1.4 Zu welchem Wert evaluieren die folgenden Ausdrücke?
;(foldl (curry + 3) 1 '(2 3 5))
; -> 20
; Zunächst wird (curry + 3) zu einer Closure aufgelöst, die sich wie x+3 verhält.
; Dann wird foldl ausgeführt und verwendet die Elemente der Liste als Argumente für die
; Closure. 1 wird als letztes Argument verwendet.
; Also: 2+3 + 3+3 + 5+3 + 1 = 20

;(map even? '(4 587 74 69 969 97 459 4))
; -> '(#t #f #t #f #f #f #f #t)
; Die Funktion map wendet eine Funktion (in diesem Fall even?) auf jedes Element
; der Liste an und gibt als Resultat eine Liste der abgebildeten Werte zurück. 

;(filter number? '(#f (2) 3 (()) 4 -7 "c"))
; -> '(3 4 -7)
; Die Funktion filter nimmt ein Prädikat (in diesem Fall number?) und eine Liste als
; Element und bildet eine Teillisten aller Elemente, die das Prädikat erfüllen.

;((curry filter (compose test-vergleich
;                        (curry ermittle-vergleichsoperation 11))
; '(5682 48 24915 -45 -6 48 11)))
; -> '(-45 -6)


;; 2 --- Einfache funktionale Ausdrücke höherer Ordnung (6 Punkte)
(define xs '(1 -2 34 12 -7 5 5))

;; 2.1 Liste der Quadrierungen aller Zahlen
;(map (curryr expt 2) xs)


;; 2.2 Teilliste aller glatt durch 3 oder 7 teilbaren Zahlen
(define (div3or7 x)
  (filter (lambda (a)
            (or (= 0 (modulo a 3))
                (= 0 (modulo a 7))))
          x))

;(div3or7 xs)

  
;; 2.3 Summe der geraden Zahlen größer 6 in xs
(define (sum>6 x)
  (foldl + 0
         (filter (lambda (a)
                   (and (even? a)
                        (> a 6)))
                 x)))

;(sum>6 xs)


;; 2.4 Aufspaltung in zwei Teillisten anhand eines Prädikats (3 Zusatzpunkte) s
(define (split f x) 
  (list (filter f x) 
        (filter (compose not f) x)))

;(split odd? xs)


;; 3 --- Spieltheorie: Das Kartenspiel SET! 
;; 3.1 - (4 Punkte)
(define pattern
  ; definiert mögliche Formen der Symbole auf einer Spielkarte
  '(oval rectangle waves))

(define color
  ; definiert mögliche Farben der Symbole auf einer Spielkarte
  '(red blue green))

(define number
  ; definiert die mögliche Anzahl der Symbole auf einer Spielkarte
  '(1 2 3))

(define mode
  ; definiert mögliche Füllungen der Symbole auf einer Spielkarte
  '(outline hatched solid))

(define card
  ; definiert die Eigenschaften einer Spielkarte
  '(number pattern mode color))


;; 3.2 - (10 Punkte)
(define (modeColorList n p)
  ; Hilfsfunktion:
  ; Erzeugt eine Liste mit allen möglichen Kombinationen von Füllungen und Farben
  (foldl append '()
         (map (lambda (m)
                (map (lambda (c)
                       (((curry list) n p) m c))
                     color))
              mode)))

(define createAllCards
  ; erzeugt eine Liste aller 81 Spielkarten
  (let ([attributes (foldl append '()
                           (map (lambda (n)
                                  (map (lambda (p)
                                         (modeColorList n p))
                                       pattern))
                                number))])
    (foldl append '() attributes)))

; Zum Testen:
;createAllCards
;(length createAllCards)


(define (showCard card)
  ; zeigt eine einzelne Spielkarte an
  (apply show-set-card card))

(define (showCards cards)
  ; zeigt mehrere Spielkarten in einer Liste an
   (map showCard cards))

; Zum Testen:
;(showCards createAllCards)


;; 3.3 - (10 Punkte)
;; 3.4 - (7 Zusatzpunkte)
