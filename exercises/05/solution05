#lang racket
(require se3-bib/butterfly-module)

;; Blatt 5

;; 1 --- Mendels Land
; (show-butterfly 'red 'dots 'straight 'hexagon)
; (show-butterfly 'yellow 'star 'straight 'ellipse)
; (show-butterfly 'blue 'star 'curly 'rhomb)

;; 1.1 - Analyse und Grobentwurf (12 Punkte)
#|
zu lösende Teilprobleme:
- anhand der dominanten Merkmale die rezessiven Merkmale der Eltern bestimmen
- die zu vererbenden Merkmale der Eltern bestimmen (zufällig: dominante oder rezessive)
- bestimmen der Anzahl der Kinder
- bestimmen der dominanten Merkmale von Kindern
- anzeigen der Schmetterlinge (Eltern und Kinder)

Gliederung:
1. createRecessiveFeatures
   Input:
     - dominante Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform) des Elternteils
       als Liste
   Aufgabe:
     - ermittelt anhand der dominanten Merkmale und der Dominanzregeln zufällige rezessive
       Merkmale    
   Output:
     - rezessive Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform) des Elternteils
       als Liste

2. selectFeatures
   Input:
     - dominante Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform) des Elternteils
     - rezessive Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform) des Elternteils
   Aufgabe:
     - wählt aus den dominanten und rezessiven Merkmalen zufällig jeweils eines
       der Merkmale aus 
   Output:
     - die zufälligen zu vererbenden Merkmale (Musterung, Flügelfarbe, Fühlerform,
       Flügelform) eines Elternteils

3. createChildFeatures
   Input:
     - die zu vererbenden Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform)
       der Mutter
     - die zu vererbenden Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform)
       des Vaters 
   Aufgabe:
     - ermittelt anhand der zu vererbenden Merkmale der Eltern und der Dominanzregeln
       die sichtbaren dominanten Merkmale des Kindes
   Output:
     - dominante Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform) des Kindes

4. drawButterfly
   Input:
     - dominante Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform) eines Schmetterlings
   Aufgabe:
     - zeigt den Schmetterling an

5. mendel (Hauptfunktion)
   Input:
     - dominante Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform) der Mutter
     - dominante Merkmale (Musterung, Flügelfarbe, Fühlerform, Flügelform) des Vaters
     - Anzahl zu erzeugender Kinder
   Aufgabe:
     - erzeugt die richtige Anzahl der Kinder und leitet die Erzeugung deren Merkmale ein
   Output: Bilder von Eltern und Kindern


Datenstruktur zum Speichern des Genoms:
Die Datenstruktur ist eine Liste von Listen, bei der das erste Element jeweils ein Merkmal
und deren zweites Element jeweils eine Liste von Merkmalen darstellt, welche dem ersten
Merkmal unterlegen sind. Heißt: Das Merkmal an erster Stelle dominiert die Merkmale aus der
nachfolgenden Liste.

Begründung:
Das Arbeiten mit Listen ermöglicht es uns durch ihre Eigenschaften einfach mit den Merkmalen 
umzugehen und zeitgleich die Reihenfolge der Dominanz der Merkmale zu beachten.
Durch die Datenstruktur kann auch die Reihenfolge der Regeln bestimmt werden und die Merkmale
müssen nicht immer für jeden Fall separat betrachtet werden, da die Nutzung von Funktionen 
höherer Ordnung möglich ist.
|#


;; 1.2 - Implementation und Erprobung (18 Punkte)
(define dominanceRules
  ; Datenstruktur der Dominanzregeln, wobei der Wert immer eine Liste all jener Merkmale ist,
  ; die von dem Schlüssel dominiert werden
  '((star . (dots stripes))
    (dots . (stripes))
    (stripes . (stripes))
    (red . (green blue yellow))
    (green . (blue yellow))
    (blue . (yellow))
    (yellow . (yellow))
    (curved . (straight curly))
    (straight . (curly))
    (curly . (curly))
    (ellipse . (hexagon rhomb))
    (hexagon . (rhomb))
    (rhomb . (rhomb))))


(define (createRecessiveFeatures dominant)
  ; ermittelt anhand der dominanten Merkmale und der Dominanzregeln
  ; zufällige rezessive Merkmale
  (if (empty? dominant)
      '()
      (cons (car (shuffle (assoc (car dominant) dominanceRules)))
            (createRecessiveFeatures (cdr dominant)))))

; Zum Testen:
; (createRecessiveFeatures '(green dots straight hexagon))


(define (selectRandomFeature x y)
  ; Hilfsmethode für selectFeatures:
  ; wählt einen von zwei Elementen zufällig aus
  (let ([r (random 2)])
    (if (= r 0)
        x
        y)))


(define (selectFeatures dominant recessive)
  ; wählt aus den dominanten und rezessiven Merkmalen zufällig jeweils eines
  ; der Merkmale aus
  (if (empty? dominant)
      '()
      (cons (selectRandomFeature (car dominant) (car recessive))
            (selectFeatures (cdr dominant) (cdr recessive)))))

; Zum Testen:
; (selectFeatures '(green dots straight ellipse) '(yellow stripes curly hexagon))


(define (inList? x list)
  ; Hilfsmethode für createChildFeatures:
  ; prüft ob ein Element in einer Liste erhalten ist
  (cond
    [(empty? list) false]
    [(equal? x (car list)) true]     
    [else (inList? x (cdr list))]))


(define (createChildFeatures mother father)
  ; ermittelt anhand zufälliger Merkmale der Eltern und der Dominanzregeln
  ; die sichtbaren dominanten Merkmale des Kindes
  (if (empty? mother)
      '()
      (if (inList? (car mother) (assoc (car father) dominanceRules))
          (cons (car father)
                (createChildFeatures (cdr mother) (cdr father)))
          (cons (car mother)
                (createChildFeatures (cdr mother) (cdr father))))))

; Zum Testen:
; (createChildFeatures '(yellow dots curly hexagon) '(red stripes curved hexagon))


(define (drawButterfly dominant)
  ; zeichnet Schmetterling
  (show-butterfly (car dominant)
                  (cadr dominant)
                  (caddr dominant) 
                  (cadddr dominant)))

; Zum Testen:
; (drawButterfly '(red stripes curved hexagon))


(define (mendelChildren motherDominant motherRecessive fatherDominant fatherRecessive n)
  ; Hilfsfunktion für mendel:
  ; erzeugt n verschiedene Kinder gleicher Eltern
  (if (> n 0)
      (cons (drawButterfly (createChildFeatures (selectFeatures motherDominant motherRecessive)
                                                (selectFeatures fatherDominant fatherRecessive)))
            (mendelChildren motherDominant motherRecessive fatherDominant fatherRecessive (- n 1)))
      '()))


(define (mendel motherDominant fatherDominant n)
  ; erzeugt n Kinder anhand der dominanten Merkmale der Eltern
  (let ([motherRecessive (createRecessiveFeatures motherDominant)]
        [fatherRecessive (createRecessiveFeatures fatherDominant)])
    (cons (drawButterfly motherDominant)
          (cons (drawButterfly fatherDominant)
                (mendelChildren motherDominant motherRecessive fatherDominant fatherRecessive n)))))
   
; Zum Testen:
; (mendel '(yellow star curly ellipse) '(red stripes straight hexagon) 3)


;; 2 --- Ein Vaterschaftstest (6 Zusatzpunkte)