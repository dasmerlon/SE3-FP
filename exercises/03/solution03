#lang racket
(require se3-bib/flaggen-module) 

;; Blatt 3

;; 1 --- Die internationale Buchstabiertafel
;; 1.1 - Eine Datenstruktur für die internationale Buchstabiertafel: (4 Punkte)
(define buchstabiertafel
  ; ordnet den Buchstaben ihren Buchstabierschlüssel zu
  '((#\A Alfa)
    (#\B Bravo)
    (#\C Charlie)
    (#\D Delta)
    (#\E Echo)
    (#\F Foxtrott)
    (#\G Golf)
    (#\H Hotel)
    (#\I India)
    (#\J Juliett)
    (#\K Kilo)
    (#\L Lima)
    (#\M Mike)
    (#\N November)
    (#\O Oscar)
    (#\P Papa)
    (#\Q Quebec)
    (#\R Romeo)
    (#\S Sierra)
    (#\T Tango)
    (#\U Uniform)
    (#\V Viktor)
    (#\W Whiskey)
    (#\X X-ray)
    (#\Y Yankee)
    (#\Z Zulu)
    (#\0 Nadazero)
    (#\1 Unaone)
    (#\2 Bissotwo)
    (#\3 Terrathree)
    (#\4 Kartefour)
    (#\5 Pantafive)
    (#\6 Sosisix)
    (#\7 Setteseven)
    (#\8 Oktoeight)
    (#\9 Novenine)
    (#\, Decimal)
    (#\. Stop)))


;; 1.3 - Zusatzaufgabe: (5 Zusatzpunkte)
; Alternativ: vordefinierte Funktion: (char-upcase n)) 
; A-Z: 65-90
; a-z = 97-122
; Differenz: 32
(define (upcase char)
  ; ändert Kleinbuchstaben zu Großbuchstaben
  (let ([integer (char->integer char)])
    (if (<= 97 integer 122)
        (integer->char (- integer 32))
        char)))


;; 1.2 - Eine Codierungsfunktion: (4 Punkte)
(define (buchstabencodierung char)
  ; bildet einen Buchstaben auf seinen Schlüssel ab
  (cadr (assoc (upcase char) buchstabiertafel)))

;(buchstabencodierung #\k)


;; 1.4 - Buchstabieren eines Textes: (8 Punkte)
; Hinweis: Aufgabe 2.3 ist äquivalent zu 1.4
; Man könnte auch beide Funktionen zusammen als eine allgemeine Funktion zusammenfügen,
; bei der man die Buchtsabier-, bzw. Flaggentafel zusammen mit dem String übergibt:
; define (buchstabieren string tafel)

(define (buchstabieren string)
  ; bildet die Buchstaben eines Textes als eine Liste der Buchstabierschlüssel ab
  (let ([charlist (string->list string)])
  (if (empty? charlist)
      '() 
      (cons (buchstabencodierung (car charlist))
            (buchstabieren (list->string (cdr charlist)))))))

;(buchstabieren "Test1.0")


;; 2 --- Die internationale Flaggenalfabet
;; 2.1 - Eine Datenstruktur für das Flaggenalfabet: (3 Punkte)
(define flaggenalphabet
  ; ordnet den Buchstaben ihre Flagge zu
  '((#\A A)
    (#\B B)
    (#\C C)
    (#\D D)
    (#\E E)
    (#\F F)
    (#\G G)
    (#\H H)
    (#\I I)
    (#\J J)
    (#\K K)
    (#\L L)
    (#\M M)
    (#\N N)
    (#\O O)
    (#\P P)
    (#\Q Q)
    (#\R R)
    (#\S S)
    (#\T T)
    (#\U U)
    (#\V V)
    (#\W W)
    (#\X X)
    (#\Y Y)
    (#\Z Z)
    (#\0 Z0)
    (#\1 Z1)
    (#\2 Z2)
    (#\3 Z3)
    (#\4 Z4)
    (#\5 Z5)
    (#\6 Z6)
    (#\7 Z7)
    (#\8 Z8)
    (#\9 Z9)))


;; 2.2 - Eine Codierungsfunktion: (3 Punkte)
(define-namespace-anchor anc)
(define ns (namespace-anchor->namespace anc))
  ; macht es möglich, eval auch im Programm und nicht nur im Interpreter zu verwenden

(define (flaggencodierung char)
  ; bildet einen Buchstaben auf seine Flagge ab
  (eval (cadr (assoc (upcase char) flaggenalphabet)) ns)) 

;(flaggencodierung #\a)


;; 2.3 - Buchstabieren eines Textes: (8 Punkte)
; Äquivalent zu 1.4
(define (flaggenbuchstabieren string)
  ; bildet die Buchstaben eines Textes als eine Liste der Flaggen ab
  (let ([charlist (string->list string)])
  (if (empty? charlist)
      '() 
      (cons (flaggencodierung (car charlist))
            (flaggenbuchstabieren (list->string (cdr charlist)))))))

;(flaggenbuchstabieren "Test2")

