#lang racket

;; Blatt 10

;; 1 --- Sudoku
;; 1.1 - Konsistenz eines Spielzustands
(define spiel #(0 0 0 0 0 9 0 7 0
                0 0 0 0 8 2 0 5 0
                3 2 7 0 0 0 0 4 0
                0 1 6 0 4 0 0 0 0
                0 5 0 0 0 0 3 0 0
                0 0 0 0 9 0 7 0 0
                0 0 0 6 0 0 0 0 5
                8 0 2 0 0 0 0 0 0
                0 0 4 2 0 0 0 0 8))

; x=Spalte, y=Zeile
;  1.1.1 (2 Punkte)
(define (xy->index x y)
    (+ x (* y 9)))

; Zum Testen:
;(xy->index 0 0)
;(xy->index 3 1)
;(xy->index 8 8)


;  1.1.2 (6 Punkte)
(define (zeile->indizes y)
  (map (curry + y) (range 9)))


(define (spalte->indizes x)
  (map (lambda (y)
         (xy->index x y))
       (range 9)))


(define (quadrant->indizes q)
  (let ([x (* 3 (modulo q 3))]
        [y (* 3 (floor (/ q 3)))])
    (append (range (xy->index x y) (+ (xy->index x y) 3))
            (range (xy->index x (+ y 1)) (+ (xy->index x (+ y 1)) 3))
            (range (xy->index x (+ y 2)) (+ (xy->index x (+ y 2)) 3)))))

; Zum Testen:
(zeile->indizes 0)
(spalte->indizes 5)
(quadrant->indizes 8)


;  1.1.3 (1 Punkt)
(define (spiel->eintraege spiel indexmenge)
  (map (lambda (x)
         (list-ref (vector->list spiel) x))
       indexmenge))

; Zum Testen:
;(spiel->eintraege spiel (zeile->indizes 0))
;(spiel->eintraege spiel (spalte->indizes 5))
;(spiel->eintraege spiel (quadrant->indizes 8))


;  1.1.4 (6 Punkte)



;; 1.2 - Sudoku l√∂sen (ohne Backtracking)
;  1.2.1 (5 Punkte)
;  1.2.2 (5 Punkte)
;  1.2.3 (10 Punkte)

;; 1.3 - Grafische Ausgabe
;  1.3.1 (5 Punkte)
;  1.3.2 (5 Zusatzpunkte)

;; 2 --- Wiederholung, Klausurvorbereitung
;; 2.1 - (6 Zusatzpunkte)
;; 2.2 - (5 Zusatzpunkte)
;; 2.3 - (2 Zusatzpunkte)
;; 2.4 - (2 Zusatzpunkte)
;; 2.5 - (2 Zusatzpunkte)
;; 2.6 - (1 Zusatzpunkt)
;; 2.7 - (3 Zusatzpunkte)
;; 2.8 - (4 Zusatzpunkte)
;; 2.9 - (10 Zusatzpunkte)
