#lang swindle
(require swindle/setf
         swindle/misc)

;; Blatt 9

#|
Ergänzung zu Aufgabenblatt 9: Methodenkombination*

Hier ist ein Beispiel für eine selbstdefinierte Methodenkombination, z.B. für string-append:

#lang swindle
; ein Beispiel für eine selbstdefinierte Methodenkombination string-append-combination
(define* string-append-combination
  (make-generic-combination
   :process-result
   (lambda (s)
     (apply string-append s)
     )
   )
  )

; ein Beispiel für die Verwendung der neuen Kombination
(defgeneric cite ((publication))
  :combination string-append-combination)
|#

;; 1 --- CLOS und generische Funktionen
;; 1.1 - Definition von Klassen (10 Punkte)

; Ein Video
(defclass* video ()
  (id
   :initarg :id
   :reader get_id
   :type <integer>
   :documentation "The unique key of this video"
   )
  (producer
   :initarg :producer
   :reader get_producer
   :type <string>
   :documentation "The producer of this video"
   )
  (year
   :initarg :year
   :reader get_year
   :type <integer>
   :documentation "The year of publication of this video"
   )
  (title
   :initarg :title
   :reader get_title
   :type <string>
   :documentation "The title of this video"
   )
  :autopred #t
  :printer #t
  :documentation "This is a video")

; Ein Film
(defclass* movie (video)
  (company   ;Produktionsgesellschaft
   :initarg :company
   :reader get_company
   :type <string>
   :documentation "The production company of this movie")
  (director  ;Regisseur
   :initarg :director
   :reader get_director
   :type <string>
   :documentation "The director of this movie")
  (genre     ;Genre
   :initarg :genre
   :reader get_genre
   :type <string>
   :documentation "The genre of this movie")
  (agerating ;Altersfreigabe
   :initarg :agerating
   :reader get_agerating
   :type <string>
   :documentation "The age rating of this movie")
  :autopred #t
  :printer #t
  :documentation "This is a movie")

; Eine Serie
(defclass* series (movie)
  (platform  ;Plattform
   :initarg :platform
   :reader get_platform
   :type <string>
   :documentation "The name of the platform of this series")
  (episode   ;Nummer der Folge
   :initarg :episode
   :reader get_episode
   :type <integer>
   :documentation "The episode of this series")
  :autopred #t
  :printer #t
  :documentation "This is a series")

; Ein YouTube-Video
(defclass* youtube-video (video)
  (channel   ;Kanalname
   :initarg :channel
   :reader get_channel
   :type <string>
   :documentation "The name of the channel of this YouTube-video")
  (link      ;Link
   :initarg :link
   :reader get_link
   :type <string>
   :documentation "The link of this youtube-video")
  (month     ;Erscheinungsmonat
   :initarg :month
   :initvalue ""
   :reader get_month
   :type <string>
   :documentation "The month of publication of this YouTube-video")
  :autopred #t
  :printer #t
  :documentation "This is a YouTube-video")

; Die Bibliographie
(define example_movie
  (make movie
        :id 1
        :producer "Chris Bender"
        :year 2020
        :title "Disney's Mulan"
        :company "Walt Disney Pictures"
        :director "Niki Caro"
        :genre "Abenteuer"
        :agerating "PG-13"))

(define example_series
  (make series
        :id 2
        :producer "Paul Germain, Joe Ansolabehere"
        :year 1997
        :title "Disneys Große Pause"
        :company "Walt Disney Television Animation"
        :director ""
        :genre "Dramedy"
        :agerating "FSK 0"
        :platform "ABC"
        :episode 1))

(define example_youtube-video
  (make youtube-video
        :id 3
        :producer "Brayden Holness"
        :year 2019
        :title "Spending Over $1,000 to RENEW my Annual Pass for Walt Disney World"
        :channel "Mickey Views - All Things Disney News"
        :link "https://www.youtube.com/watch?v=TDnBjVGv5eQ"
        :month "Juni"))


;; 1.2 - Generische Funktionen und Methoden (5 Punkte)
;; 1.3 - Ergänzungsmethoden (5 Punkte)

;; 2 --- CLOS und Vererbung
;; 2.1 - Definition von Klassen (5 Punkte)
;; 2.1.1
(defclass tier())

(defclass landtier (tier))

(defclass arboreal (landtier))

(defclass saxicolous (landtier))

(defclass arenicolous (landtier))

(defclass troglofauna (landtier))

(defclass meerestier (tier))

(defclass lufttier (tier))

;; 2.1.2
(defclass amphibie (meerestier landtier))

(defclass libelle (lufttier amphibie))

(defclass flug-landtier (saxicolous lufttier))

(defclass fantasie-fisch (meerestier lufttier))


;; 2.2 - Operationen und Methodenkombination (5 Punkte)

; Da jeder Lebensraum interessant ist, in dem sich das Tier bewegen kann,
; sollte hierbei eine Kombination genutzt werden. Die zurückgegebenen Werte
; werden auf eine Liste gesetzt.
(defgeneric getLebensraum ((t tier))
  :combination generic-list-combination)

; Da hier die Maximalgeschwindigkeit gefragt ist, nutzen wir die generic-max-combination
(defgeneric getMaxGeschwindigkeit ((t tier))
  :combination generic-max-combination)

; Ein Tier ist entweder gefährlich (#t) oder ungefährlich (#f) für den Menschen.
; Daher wählen wir die or-Kombination, da das Tier als gefährlich angezeigt werden
; soll, auch wenn es nur teilgefährlich ist.
(defgeneric getGefaehrlichkeit ((t tier))
  :combination generic-or-combination)

; Da der Verbrauch an Nahrung abhängig von dem Lebensraum und der Umgebung der
; sportlichen Aktivität ist, ist die + Kombination am sinnvollsten, denn man kennt es ja:
; "Wenn ich schwimme und jogge, muss ich mehr essen, als wenn ich nur jogge."
(defgeneric getVerbrauch ((t tier))
  :combination generic-+-combination)

; Wir erwarten das worst-case-Scenario: Das Tier stirbt früher.
(defgeneric getLebenserwartung ((t tier))
  :combination generic-min-combination)


;; 2.3 - Klassenpräzedenz bei Mehrfachvererbung (10 Punkte)
; Gewählt wurde die Wiedergabe des Lebensraums
(defmethod getLebensraum ((l landtier))
  'land)
(defmethod getLebensraum ((m meerestier))
  'wasser)
(defmethod getLebensraum ((l lufttier))
  'luft)
(defmethod getLebensraum ((a arboreal))
  'arboreal)
(defmethod getLebensraum ((s saxicolous))
  'saxicolous)
(defmethod getLebensraum ((a arenicolous))
  'arenicolous)
(defmethod getLebensraum ((t troglofauna))
  'troglofauna)


; Die Klassenpräzedenzliste ist hierbei unerlässlich,
; da sie die Reihenfolge bestimmt, in der die Methoden angewandt werden

; Amphibientier
;(displayln (getLebensraum (make amphibie)))
; Für das Amphibientier wurde in der Vererbung festgelegt, dass das
; Wassertier wichtiger ist als das Landtier, somit ist die
; Präzedenzliste in der Reihenfolge amphibie, wassertier, landtier, tier
; und die sich ergebende Ausgabe '(wasser land)

; Libellentier
;(displayln (getLebensraum (make libelle)))
; Für das Libellentier wurde festgelegt, dass das Lufttier wichtiger ist
; als das Amphibientier, somit steht das Lufttier vor dem
; Amphibientier in der Präzedenzliste. Es ergibt sich also die
; Liste '(luft wasser land) als Ergebnis

; flugfähige Landtier
;(displayln (getLebensraum (make flug-landtier)))
; Das Ergebnis ist '(saxicolous land luft)
; Da die Präzedenzliste die Reihenfolge flug-landtier, saxicolous, landtier,
; lufttier, tier hat.
; Bei diesem Beispiel lässt sich besonders schön beobachten, dass gemeinsame
; Vorgänger nachgelagert sind.
; (Anhand des Nachlagerns von Landtier gegenüber dem Saxicolous)

; fliegende Fantasie-Fisch
;(displayln (getLebensraum (make fantasie-fisch)))
; '(wasser luft)
; Die Reihenfolge auf der Präzedenzliste ist fantasie-fisch, meerestier, lufttier, tier.
; Somit werden sie in dieser Reihenfolge abgearbeitet und die Ergebnisse auf
; die Liste gepackt.



; Gewählt wurde die Wiedergabe der Gefährlichkeit
(defmethod getGefaehrlichkeit ((m meerestier))
  #t)
(defmethod getGefaehrlichkeit ((l lufttier))
  #f)
(defmethod getGefaehrlichkeit ((a arboreal))
  #f)
(defmethod getGefaehrlichkeit ((s saxicolous))
  #f)
(defmethod getGefaehrlichkeit ((a arenicolous))
  #t)
(defmethod getGefaehrlichkeit ((t troglofauna))
  #t)


; Die Klassenpräzedenzliste ist hierbei unerlässlich,
; da sie die Reihenfolge bestimmt, in der die Methoden angewandt werden

; Amphibientier
(displayln (getGefaehrlichkeit (make amphibie)))
; #t
; Die Präzedenzliste in der Reihenfolge amphibie, meerestier, landtier, tier
; Da Landtier und Tier keine Methode anbieten für getGefaehrlichkeit: '(#t) 

; Libellentier
(displayln (getGefaehrlichkeit (make libelle)))
; #t
; Präzedenzliste: libelle, Lufttier, amphibie, meerestier, landtier, tier.
; '(#f #t)

; flugfähige Landtier
(displayln (getGefaehrlichkeit (make flug-landtier)))
; #f
; Da die Präzedenzliste die Reihenfolge flug-landtier, saxicolous, landtier,
; lufttier, tier hat.
; '(#f #f)

; fliegende Fantasie-Fisch
(displayln (getGefaehrlichkeit (make fantasie-fisch)))
; #t
; Die Reihenfolge auf der Präzedenzliste ist fantasie-fisch, meerestier, lufttier, tier.
; '(#t #f)