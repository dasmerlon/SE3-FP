#lang swindle
(require swindle/setf
         swindle/misc)

;; Blatt 9

#|
Ergänzung zu Aufgabenblatt 9: Methodenkombination*

Hier ist ein Beispiel für eine selbstdefinierte Methodenkombination, z.B. für string-append:

|#

;; 1 --- CLOS und generische Funktionen
;; 1.1 - Definition von Klassen (10 Punkte)

; Ein Video
(defclass* video ()
  (id
   :initarg :id
   :reader get_id
   :type <integer>
   :documentation "The unique key of this video"
   )
  (producer
   :initarg :producer
   :reader get_producer
   :type <string>
   :documentation "The producer of this video"
   )
  (year
   :initarg :year
   :reader get_year
   :type <integer>
   :documentation "The year of publication of this video"
   )
  (title
   :initarg :title
   :reader get_title
   :type <string>
   :documentation "The title of this video"
   )
  :autopred #t
  :printer #t
  :documentation "This is a video")

; Ein Film
(defclass* movie (video)
  (company   ;Produktionsgesellschaft
   :initarg :company
   :reader get_company
   :type <string>
   :documentation "The production company of this movie")
  (director  ;Regisseur
   :initarg :director
   :reader get_director
   :type <string>
   :documentation "The director of this movie")
  (genre     ;Genre
   :initarg :genre
   :reader get_genre
   :type <string>
   :documentation "The genre of this movie")
  (agerating ;Altersfreigabe
   :initarg :agerating
   :reader get_agerating
   :type <string>
   :documentation "The age rating of this movie")
  :autopred #t
  :printer #t
  :documentation "This is a movie")

; Eine Serie
(defclass* series (movie)
  (platform  ;Plattform
   :initarg :platform
   :reader get_platform
   :type <string>
   :documentation "The name of the platform of this series")
  (episode   ;Nummer der Folge
   :initarg :episode
   :reader get_episode
   :type <integer>
   :documentation "The episode of this series")
  :autopred #t
  :printer #t
  :documentation "This is a series")

; Ein YouTube-Video
(defclass* youtube-video (video)
  (channel   ;Kanalname
   :initarg :channel
   :reader get_channel
   :type <string>
   :documentation "The name of the channel of this YouTube-video")
  (link      ;Link
   :initarg :link
   :reader get_link
   :type <string>
   :documentation "The link of this youtube-video")
  (month     ;Erscheinungsmonat
   :initarg :month
   :initvalue ""
   :reader get_month
   :type <string>
   :documentation "The month of publication of this YouTube-video")
  :autopred #t
  :printer #t
  :documentation "This is a YouTube-video")

; Die Bibliographie
(define example_movie
  (make movie
        :id 1
        :producer "Chris Bender"
        :year 2020
        :title "Disney's Mulan"
        :company "Walt Disney Pictures"
        :director "Niki Caro"
        :genre "Abenteuer"
        :agerating "PG-13"))

(define example_series
  (make series
        :id 2
        :producer "Paul Germain, Joe Ansolabehere"
        :year 1997
        :title "Disneys Große Pause"
        :company "Walt Disney Television Animation"
        :director ""
        :genre "Dramedy"
        :agerating "FSK 0"
        :platform "ABC"
        :episode 1))

(define example_youtube-video
  (make youtube-video
        :id 3
        :producer "Brayden Holness"
        :year 2019
        :title "Spending Over $1,000 to RENEW my Annual Pass for Walt Disney World"
        :channel "Mickey Views - All Things Disney News"
        :link "https://www.youtube.com/watch?v=TDnBjVGv5eQ"
        :month "Juni"))



;; 1.2 - Generische Funktionen und Methoden (5 Punkte)
(define* string-append-combination
  (make-generic-combination
   :process-result
   (lambda (s)
     (apply string-append s))))

(defgeneric cite ((v video))
  :combination string-append-combination)

;cite fuer einen Film
(defmethod cite ((f movie))
  (string-append
    "\nProduction Company: "
    (get_company f)
    "\nRegisseur: "
    (get_director f)
    "\nGenre: "
    (get_genre f)
    "\nAltersfreigabe: "
    (get_agerating f)
    " "))

;cite fuer eine Serie
(defmethod cite ((s series))
  (string-append
    "\nPlattform: "
    (get_platform s)
    "\nNummer der Folge: "
    (get_episode s)
    " "))

;cite fuer ein youtube-video
(defmethod cite ((v youtube-video))
  (string-append
    "\nKanal: "
    (get_channel v)
    "\nYoutubelink: "
    (get_link v)
    "\nMonat der Veroeffentlichung "
    (get_month v)
    " "))

;cite fuer ein video
(defmethod cite ((v video))
  (string-append
    "Produzent: "
    (get_producer v)
    "\nErscheinungsjahr: "
    (number->string (get_year v))
    "\nTitel: "
    (get_title v)
    " "))


(displayln (cite example_movie))


;; 1.3 - Ergänzungsmethoden (5 Punkte)
;Eine Ergänzungsmethode ist eine Methode in einer Unterklasse, die das Verhalten einer Methode aus der Oberklasse ergänzt. Dabei wird die Methode aus der Oberklasse nicht ersetzt sonder mit aufgerufen. Mit :before oder :after kann man angeben, ob die Methode der Unterklasse vor der Methode der Oberklasse, oder danach ausgeführt werden soll.

;; 2 --- CLOS und Vererbung
;; 2.1 - Definition von Klassen (5 Punkte)
;; 2.1.1
(defclass tier()
  (lebensraum
   :reader get_lebensraum
   :initarg :lebensraum
   :initvalue ""
   :type <string>
   :documentation "Der Lebensraum, in dem das Tier lebt"
   )
  (geschwindigkeit
   :reader get_geschwindigkeit
   :initarg :geschwindigkeit
   :initvalue 0
   :type <number>
   :documentation "Die Maximalgeschwindigkeit des Tieres in km/h"
   )
  (gefahr
   :reader get_gefahr
   :initarg :gefahr
   :initvalue 0
   :type <number>
   :documentation "Die Gefährlichkeit für den Menschen auf einer Skala von 1 - 10"
  )
  (verbrauch
   :reader get_verbrauch
   :initarg :verbrauch
   :initvalue 0
   :type <number>
   :documentation "Nahrungsverbrauch pro Woche in kg"
   )
   (lebenserwartung
    :reader get_lebenserwartung
    :initarg :lebenserwartung
    :initvalue 0
    :type <number>
    :documentation "Lebenserwartung in Jahren"
    )
  :printer #t
  )

(defclass landtier (tier)
  (lebensraum :initvalue "land"))

(defclass arboreal (landtier)
  (lebensraum :initvalue "Bäume"))

(defclass saxicolous (landtier)
  (lebensraum :initvalue "Steine"))

(defclass arenicolous (landtier)
  (lebensraum :initvalue "Sand"))

(defclass troglofauna (landtier)
  (lebensraum :initvalue "Höhlen"))

(defclass meerestier (tier)
  (lebensraum :initvalue "Meer"))

(defclass lufttier (tier)
  (lebensraum :initvalue "Luft"))

;; 2.1.2
(defclass amphibie (meerestier lufttier))

(defclass libelle (landtier amphibie))

(defclass flug-landtier (landtier lufttier))

(defclass fantasie-fisch (meerestier lufttier))


;; 2.2 - Operationen und Methodenkombination (5 Punkte)
(defgeneric read-lebensraum ((t tier))
  :combination string-append-combination)

(defgeneric read-geschwindigkeit ((t tier))
  :combination generic-min-combination)

(defgeneric read-gefahr ((t tier))
  :combination generic-min-combination)

(defgeneric read-verbrauch ((t tier))
  :combination generic-max-combination)

(defgeneric read-lebenserwartung ((t tier))
  :combination generic-min-combination)

;; 2.3 - Klassenpräzedenz bei Mehrfachvererbung (10 Punkte)
;(defmethod read-lebensraum ((t tier))
;  (get_lebensraum t))

(defmethod read-lebensraum ((t landtier))
  (get_lebensraum t))

(defmethod read-lebensraum ((t arboreal))
  (get_lebensraum t))

(defmethod read-lebensraum ((t saxicolous))
  (get_lebensraum t))

(defmethod read-lebensraum ((t arenicolous))
  (get_lebensraum t))

(defmethod read-lebensraum ((t troglofauna))
  (get_lebensraum t))

(defmethod read-lebensraum ((t meerestier))
  (get_lebensraum t))

(defmethod read-lebensraum ((t lufttier))
  (get_lebensraum t))


(define tiger (make landtier
                    :geschwindigkeit 50
                    :gefahr 10
                    :verbrauch 50
                    :lebenserwartung 30))

(displayln (read-lebensraum tiger))
